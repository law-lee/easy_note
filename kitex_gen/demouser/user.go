// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package demouser

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type ErrCode int64

const (
	ErrCode_SuccessCode                ErrCode = 0
	ErrCode_ServiceErrCode             ErrCode = 10001
	ErrCode_ParamErrCode               ErrCode = 10002
	ErrCode_UserAlreadyExistErrCode    ErrCode = 10003
	ErrCode_AuthorizationFailedErrCode ErrCode = 10004
)

func (p ErrCode) String() string {
	switch p {
	case ErrCode_SuccessCode:
		return "SuccessCode"
	case ErrCode_ServiceErrCode:
		return "ServiceErrCode"
	case ErrCode_ParamErrCode:
		return "ParamErrCode"
	case ErrCode_UserAlreadyExistErrCode:
		return "UserAlreadyExistErrCode"
	case ErrCode_AuthorizationFailedErrCode:
		return "AuthorizationFailedErrCode"
	}
	return "<UNSET>"
}

func ErrCodeFromString(s string) (ErrCode, error) {
	switch s {
	case "SuccessCode":
		return ErrCode_SuccessCode, nil
	case "ServiceErrCode":
		return ErrCode_ServiceErrCode, nil
	case "ParamErrCode":
		return ErrCode_ParamErrCode, nil
	case "UserAlreadyExistErrCode":
		return ErrCode_UserAlreadyExistErrCode, nil
	case "AuthorizationFailedErrCode":
		return ErrCode_AuthorizationFailedErrCode, nil
	}
	return ErrCode(0), fmt.Errorf("not a valid ErrCode string")
}

func ErrCodePtr(v ErrCode) *ErrCode { return &v }
func (p *ErrCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ErrCode(result.Int64)
	return
}

func (p *ErrCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BaseResp struct {
	StatusCode    int64  `thrift:"status_code,1" frugal:"1,default,i64" json:"status_code"`
	StatusMessage string `thrift:"status_message,2" frugal:"2,default,string" json:"status_message"`
	ServiceTime   int64  `thrift:"service_time,3" frugal:"3,default,i64" json:"service_time"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetStatusCode() (v int64) {
	return p.StatusCode
}

func (p *BaseResp) GetStatusMessage() (v string) {
	return p.StatusMessage
}

func (p *BaseResp) GetServiceTime() (v int64) {
	return p.ServiceTime
}
func (p *BaseResp) SetStatusCode(val int64) {
	p.StatusCode = val
}
func (p *BaseResp) SetStatusMessage(val string) {
	p.StatusMessage = val
}
func (p *BaseResp) SetServiceTime(val int64) {
	p.ServiceTime = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "status_code",
	2: "status_message",
	3: "service_time",
}

type User struct {
	UserId   int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	Username string `thrift:"username,2" frugal:"2,default,string" json:"username"`
	Avatar   string `thrift:"avatar,3" frugal:"3,default,string" json:"avatar"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetUserId() (v int64) {
	return p.UserId
}

func (p *User) GetUsername() (v string) {
	return p.Username
}

func (p *User) GetAvatar() (v string) {
	return p.Avatar
}
func (p *User) SetUserId(val int64) {
	p.UserId = val
}
func (p *User) SetUsername(val string) {
	p.Username = val
}
func (p *User) SetAvatar(val string) {
	p.Avatar = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "user_id",
	2: "username",
	3: "avatar",
}

type CreateUserRequest struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password"`
}

func NewCreateUserRequest() *CreateUserRequest {
	return &CreateUserRequest{}
}

func (p *CreateUserRequest) InitDefault() {
}

func (p *CreateUserRequest) GetUsername() (v string) {
	return p.Username
}

func (p *CreateUserRequest) GetPassword() (v string) {
	return p.Password
}
func (p *CreateUserRequest) SetUsername(val string) {
	p.Username = val
}
func (p *CreateUserRequest) SetPassword(val string) {
	p.Password = val
}

func (p *CreateUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserRequest(%+v)", *p)
}

var fieldIDToName_CreateUserRequest = map[int16]string{
	1: "username",
	2: "password",
}

type CreateUserResponse struct {
	BaseResp *BaseResp `thrift:"base_resp,1" frugal:"1,default,BaseResp" json:"base_resp"`
}

func NewCreateUserResponse() *CreateUserResponse {
	return &CreateUserResponse{}
}

func (p *CreateUserResponse) InitDefault() {
}

var CreateUserResponse_BaseResp_DEFAULT *BaseResp

func (p *CreateUserResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateUserResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateUserResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}

func (p *CreateUserResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserResponse(%+v)", *p)
}

var fieldIDToName_CreateUserResponse = map[int16]string{
	1: "base_resp",
}

type MGetUserRequest struct {
	UserIds []int64 `thrift:"user_ids,1" frugal:"1,default,list<i64>" json:"user_ids"`
}

func NewMGetUserRequest() *MGetUserRequest {
	return &MGetUserRequest{}
}

func (p *MGetUserRequest) InitDefault() {
}

func (p *MGetUserRequest) GetUserIds() (v []int64) {
	return p.UserIds
}
func (p *MGetUserRequest) SetUserIds(val []int64) {
	p.UserIds = val
}

func (p *MGetUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetUserRequest(%+v)", *p)
}

var fieldIDToName_MGetUserRequest = map[int16]string{
	1: "user_ids",
}

type MGetUserResponse struct {
	Users    []*User   `thrift:"users,1" frugal:"1,default,list<User>" json:"users"`
	BaseResp *BaseResp `thrift:"base_resp,2" frugal:"2,default,BaseResp" json:"base_resp"`
}

func NewMGetUserResponse() *MGetUserResponse {
	return &MGetUserResponse{}
}

func (p *MGetUserResponse) InitDefault() {
}

func (p *MGetUserResponse) GetUsers() (v []*User) {
	return p.Users
}

var MGetUserResponse_BaseResp_DEFAULT *BaseResp

func (p *MGetUserResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return MGetUserResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MGetUserResponse) SetUsers(val []*User) {
	p.Users = val
}
func (p *MGetUserResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}

func (p *MGetUserResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MGetUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetUserResponse(%+v)", *p)
}

var fieldIDToName_MGetUserResponse = map[int16]string{
	1: "users",
	2: "base_resp",
}

type CheckUserRequest struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password"`
}

func NewCheckUserRequest() *CheckUserRequest {
	return &CheckUserRequest{}
}

func (p *CheckUserRequest) InitDefault() {
}

func (p *CheckUserRequest) GetUsername() (v string) {
	return p.Username
}

func (p *CheckUserRequest) GetPassword() (v string) {
	return p.Password
}
func (p *CheckUserRequest) SetUsername(val string) {
	p.Username = val
}
func (p *CheckUserRequest) SetPassword(val string) {
	p.Password = val
}

func (p *CheckUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckUserRequest(%+v)", *p)
}

var fieldIDToName_CheckUserRequest = map[int16]string{
	1: "username",
	2: "password",
}

type CheckUserResponse struct {
	UserId   int64     `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	BaseResp *BaseResp `thrift:"base_resp,2" frugal:"2,default,BaseResp" json:"base_resp"`
}

func NewCheckUserResponse() *CheckUserResponse {
	return &CheckUserResponse{}
}

func (p *CheckUserResponse) InitDefault() {
}

func (p *CheckUserResponse) GetUserId() (v int64) {
	return p.UserId
}

var CheckUserResponse_BaseResp_DEFAULT *BaseResp

func (p *CheckUserResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return CheckUserResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CheckUserResponse) SetUserId(val int64) {
	p.UserId = val
}
func (p *CheckUserResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}

func (p *CheckUserResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CheckUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckUserResponse(%+v)", *p)
}

var fieldIDToName_CheckUserResponse = map[int16]string{
	1: "user_id",
	2: "base_resp",
}

type UserService interface {
	CreateUser(ctx context.Context, req *CreateUserRequest) (r *CreateUserResponse, err error)

	MGetUser(ctx context.Context, req *MGetUserRequest) (r *MGetUserResponse, err error)

	CheckUser(ctx context.Context, req *CheckUserRequest) (r *CheckUserResponse, err error)
}

type UserServiceCreateUserArgs struct {
	Req *CreateUserRequest `thrift:"req,1" frugal:"1,default,CreateUserRequest" json:"req"`
}

func NewUserServiceCreateUserArgs() *UserServiceCreateUserArgs {
	return &UserServiceCreateUserArgs{}
}

func (p *UserServiceCreateUserArgs) InitDefault() {
}

var UserServiceCreateUserArgs_Req_DEFAULT *CreateUserRequest

func (p *UserServiceCreateUserArgs) GetReq() (v *CreateUserRequest) {
	if !p.IsSetReq() {
		return UserServiceCreateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceCreateUserArgs) SetReq(val *CreateUserRequest) {
	p.Req = val
}

func (p *UserServiceCreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceCreateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceCreateUserArgs = map[int16]string{
	1: "req",
}

type UserServiceCreateUserResult struct {
	Success *CreateUserResponse `thrift:"success,0,optional" frugal:"0,optional,CreateUserResponse" json:"success,omitempty"`
}

func NewUserServiceCreateUserResult() *UserServiceCreateUserResult {
	return &UserServiceCreateUserResult{}
}

func (p *UserServiceCreateUserResult) InitDefault() {
}

var UserServiceCreateUserResult_Success_DEFAULT *CreateUserResponse

func (p *UserServiceCreateUserResult) GetSuccess() (v *CreateUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceCreateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceCreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateUserResponse)
}

func (p *UserServiceCreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceCreateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCreateUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceCreateUserResult = map[int16]string{
	0: "success",
}

type UserServiceMGetUserArgs struct {
	Req *MGetUserRequest `thrift:"req,1" frugal:"1,default,MGetUserRequest" json:"req"`
}

func NewUserServiceMGetUserArgs() *UserServiceMGetUserArgs {
	return &UserServiceMGetUserArgs{}
}

func (p *UserServiceMGetUserArgs) InitDefault() {
}

var UserServiceMGetUserArgs_Req_DEFAULT *MGetUserRequest

func (p *UserServiceMGetUserArgs) GetReq() (v *MGetUserRequest) {
	if !p.IsSetReq() {
		return UserServiceMGetUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceMGetUserArgs) SetReq(val *MGetUserRequest) {
	p.Req = val
}

func (p *UserServiceMGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceMGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceMGetUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceMGetUserArgs = map[int16]string{
	1: "req",
}

type UserServiceMGetUserResult struct {
	Success *MGetUserResponse `thrift:"success,0,optional" frugal:"0,optional,MGetUserResponse" json:"success,omitempty"`
}

func NewUserServiceMGetUserResult() *UserServiceMGetUserResult {
	return &UserServiceMGetUserResult{}
}

func (p *UserServiceMGetUserResult) InitDefault() {
}

var UserServiceMGetUserResult_Success_DEFAULT *MGetUserResponse

func (p *UserServiceMGetUserResult) GetSuccess() (v *MGetUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceMGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceMGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*MGetUserResponse)
}

func (p *UserServiceMGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceMGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceMGetUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceMGetUserResult = map[int16]string{
	0: "success",
}

type UserServiceCheckUserArgs struct {
	Req *CheckUserRequest `thrift:"req,1" frugal:"1,default,CheckUserRequest" json:"req"`
}

func NewUserServiceCheckUserArgs() *UserServiceCheckUserArgs {
	return &UserServiceCheckUserArgs{}
}

func (p *UserServiceCheckUserArgs) InitDefault() {
}

var UserServiceCheckUserArgs_Req_DEFAULT *CheckUserRequest

func (p *UserServiceCheckUserArgs) GetReq() (v *CheckUserRequest) {
	if !p.IsSetReq() {
		return UserServiceCheckUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceCheckUserArgs) SetReq(val *CheckUserRequest) {
	p.Req = val
}

func (p *UserServiceCheckUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceCheckUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCheckUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceCheckUserArgs = map[int16]string{
	1: "req",
}

type UserServiceCheckUserResult struct {
	Success *CheckUserResponse `thrift:"success,0,optional" frugal:"0,optional,CheckUserResponse" json:"success,omitempty"`
}

func NewUserServiceCheckUserResult() *UserServiceCheckUserResult {
	return &UserServiceCheckUserResult{}
}

func (p *UserServiceCheckUserResult) InitDefault() {
}

var UserServiceCheckUserResult_Success_DEFAULT *CheckUserResponse

func (p *UserServiceCheckUserResult) GetSuccess() (v *CheckUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceCheckUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceCheckUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckUserResponse)
}

func (p *UserServiceCheckUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceCheckUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceCheckUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceCheckUserResult = map[int16]string{
	0: "success",
}
