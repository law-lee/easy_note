// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package demonote

import (
	"context"
	"fmt"
)

type BaseResp struct {
	StatusCode    int64  `thrift:"status_code,1" frugal:"1,default,i64" json:"status_code"`
	StatusMessage string `thrift:"status_message,2" frugal:"2,default,string" json:"status_message"`
	ServiceTime   int64  `thrift:"service_time,3" frugal:"3,default,i64" json:"service_time"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetStatusCode() (v int64) {
	return p.StatusCode
}

func (p *BaseResp) GetStatusMessage() (v string) {
	return p.StatusMessage
}

func (p *BaseResp) GetServiceTime() (v int64) {
	return p.ServiceTime
}
func (p *BaseResp) SetStatusCode(val int64) {
	p.StatusCode = val
}
func (p *BaseResp) SetStatusMessage(val string) {
	p.StatusMessage = val
}
func (p *BaseResp) SetServiceTime(val int64) {
	p.ServiceTime = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "status_code",
	2: "status_message",
	3: "service_time",
}

type Note struct {
	NoteId     int64  `thrift:"note_id,1" frugal:"1,default,i64" json:"note_id"`
	UserId     int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	Username   string `thrift:"username,3" frugal:"3,default,string" json:"username"`
	UserAvatar string `thrift:"user_avatar,4" frugal:"4,default,string" json:"user_avatar"`
	Title      string `thrift:"title,5" frugal:"5,default,string" json:"title"`
	Content    string `thrift:"content,6" frugal:"6,default,string" json:"content"`
	CreateTime int64  `thrift:"create_time,7" frugal:"7,default,i64" json:"create_time"`
}

func NewNote() *Note {
	return &Note{}
}

func (p *Note) InitDefault() {
}

func (p *Note) GetNoteId() (v int64) {
	return p.NoteId
}

func (p *Note) GetUserId() (v int64) {
	return p.UserId
}

func (p *Note) GetUsername() (v string) {
	return p.Username
}

func (p *Note) GetUserAvatar() (v string) {
	return p.UserAvatar
}

func (p *Note) GetTitle() (v string) {
	return p.Title
}

func (p *Note) GetContent() (v string) {
	return p.Content
}

func (p *Note) GetCreateTime() (v int64) {
	return p.CreateTime
}
func (p *Note) SetNoteId(val int64) {
	p.NoteId = val
}
func (p *Note) SetUserId(val int64) {
	p.UserId = val
}
func (p *Note) SetUsername(val string) {
	p.Username = val
}
func (p *Note) SetUserAvatar(val string) {
	p.UserAvatar = val
}
func (p *Note) SetTitle(val string) {
	p.Title = val
}
func (p *Note) SetContent(val string) {
	p.Content = val
}
func (p *Note) SetCreateTime(val int64) {
	p.CreateTime = val
}

func (p *Note) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Note(%+v)", *p)
}

var fieldIDToName_Note = map[int16]string{
	1: "note_id",
	2: "user_id",
	3: "username",
	4: "user_avatar",
	5: "title",
	6: "content",
	7: "create_time",
}

type CreateNoteRequest struct {
	Title   string `thrift:"title,1" frugal:"1,default,string" json:"title"`
	Content string `thrift:"content,2" frugal:"2,default,string" json:"content"`
	UserId  int64  `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
}

func NewCreateNoteRequest() *CreateNoteRequest {
	return &CreateNoteRequest{}
}

func (p *CreateNoteRequest) InitDefault() {
}

func (p *CreateNoteRequest) GetTitle() (v string) {
	return p.Title
}

func (p *CreateNoteRequest) GetContent() (v string) {
	return p.Content
}

func (p *CreateNoteRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *CreateNoteRequest) SetTitle(val string) {
	p.Title = val
}
func (p *CreateNoteRequest) SetContent(val string) {
	p.Content = val
}
func (p *CreateNoteRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *CreateNoteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNoteRequest(%+v)", *p)
}

var fieldIDToName_CreateNoteRequest = map[int16]string{
	1: "title",
	2: "content",
	3: "user_id",
}

type CreateNoteResponse struct {
	BaseResp *BaseResp `thrift:"base_resp,1" frugal:"1,default,BaseResp" json:"base_resp"`
}

func NewCreateNoteResponse() *CreateNoteResponse {
	return &CreateNoteResponse{}
}

func (p *CreateNoteResponse) InitDefault() {
}

var CreateNoteResponse_BaseResp_DEFAULT *BaseResp

func (p *CreateNoteResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateNoteResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateNoteResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}

func (p *CreateNoteResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateNoteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNoteResponse(%+v)", *p)
}

var fieldIDToName_CreateNoteResponse = map[int16]string{
	1: "base_resp",
}

type DeleteNoteRequest struct {
	NoteId int64 `thrift:"note_id,1" frugal:"1,default,i64" json:"note_id"`
	UserId int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
}

func NewDeleteNoteRequest() *DeleteNoteRequest {
	return &DeleteNoteRequest{}
}

func (p *DeleteNoteRequest) InitDefault() {
}

func (p *DeleteNoteRequest) GetNoteId() (v int64) {
	return p.NoteId
}

func (p *DeleteNoteRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *DeleteNoteRequest) SetNoteId(val int64) {
	p.NoteId = val
}
func (p *DeleteNoteRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *DeleteNoteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNoteRequest(%+v)", *p)
}

var fieldIDToName_DeleteNoteRequest = map[int16]string{
	1: "note_id",
	2: "user_id",
}

type DeleteNoteResponse struct {
	BaseResp *BaseResp `thrift:"base_resp,1" frugal:"1,default,BaseResp" json:"base_resp"`
}

func NewDeleteNoteResponse() *DeleteNoteResponse {
	return &DeleteNoteResponse{}
}

func (p *DeleteNoteResponse) InitDefault() {
}

var DeleteNoteResponse_BaseResp_DEFAULT *BaseResp

func (p *DeleteNoteResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return DeleteNoteResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteNoteResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}

func (p *DeleteNoteResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteNoteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNoteResponse(%+v)", *p)
}

var fieldIDToName_DeleteNoteResponse = map[int16]string{
	1: "base_resp",
}

type UpdateNoteRequest struct {
	NoteId  int64   `thrift:"note_id,1" frugal:"1,default,i64" json:"note_id"`
	UserId  int64   `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	Title   *string `thrift:"title,3,optional" frugal:"3,optional,string" json:"title,omitempty"`
	Content *string `thrift:"content,4,optional" frugal:"4,optional,string" json:"content,omitempty"`
}

func NewUpdateNoteRequest() *UpdateNoteRequest {
	return &UpdateNoteRequest{}
}

func (p *UpdateNoteRequest) InitDefault() {
}

func (p *UpdateNoteRequest) GetNoteId() (v int64) {
	return p.NoteId
}

func (p *UpdateNoteRequest) GetUserId() (v int64) {
	return p.UserId
}

var UpdateNoteRequest_Title_DEFAULT string

func (p *UpdateNoteRequest) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return UpdateNoteRequest_Title_DEFAULT
	}
	return *p.Title
}

var UpdateNoteRequest_Content_DEFAULT string

func (p *UpdateNoteRequest) GetContent() (v string) {
	if !p.IsSetContent() {
		return UpdateNoteRequest_Content_DEFAULT
	}
	return *p.Content
}
func (p *UpdateNoteRequest) SetNoteId(val int64) {
	p.NoteId = val
}
func (p *UpdateNoteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *UpdateNoteRequest) SetTitle(val *string) {
	p.Title = val
}
func (p *UpdateNoteRequest) SetContent(val *string) {
	p.Content = val
}

func (p *UpdateNoteRequest) IsSetTitle() bool {
	return p.Title != nil
}

func (p *UpdateNoteRequest) IsSetContent() bool {
	return p.Content != nil
}

func (p *UpdateNoteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNoteRequest(%+v)", *p)
}

var fieldIDToName_UpdateNoteRequest = map[int16]string{
	1: "note_id",
	2: "user_id",
	3: "title",
	4: "content",
}

type UpdateNoteResponse struct {
	BaseResp *BaseResp `thrift:"base_resp,1" frugal:"1,default,BaseResp" json:"base_resp"`
}

func NewUpdateNoteResponse() *UpdateNoteResponse {
	return &UpdateNoteResponse{}
}

func (p *UpdateNoteResponse) InitDefault() {
}

var UpdateNoteResponse_BaseResp_DEFAULT *BaseResp

func (p *UpdateNoteResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return UpdateNoteResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateNoteResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}

func (p *UpdateNoteResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateNoteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNoteResponse(%+v)", *p)
}

var fieldIDToName_UpdateNoteResponse = map[int16]string{
	1: "base_resp",
}

type QueryNoteRequest struct {
	UserId    int64   `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	SearchKey *string `thrift:"search_key,2,optional" frugal:"2,optional,string" json:"search_key,omitempty"`
	Offset    int64   `thrift:"offset,3" frugal:"3,default,i64" json:"offset"`
	Limit     int64   `thrift:"limit,4" frugal:"4,default,i64" json:"limit"`
}

func NewQueryNoteRequest() *QueryNoteRequest {
	return &QueryNoteRequest{}
}

func (p *QueryNoteRequest) InitDefault() {
}

func (p *QueryNoteRequest) GetUserId() (v int64) {
	return p.UserId
}

var QueryNoteRequest_SearchKey_DEFAULT string

func (p *QueryNoteRequest) GetSearchKey() (v string) {
	if !p.IsSetSearchKey() {
		return QueryNoteRequest_SearchKey_DEFAULT
	}
	return *p.SearchKey
}

func (p *QueryNoteRequest) GetOffset() (v int64) {
	return p.Offset
}

func (p *QueryNoteRequest) GetLimit() (v int64) {
	return p.Limit
}
func (p *QueryNoteRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QueryNoteRequest) SetSearchKey(val *string) {
	p.SearchKey = val
}
func (p *QueryNoteRequest) SetOffset(val int64) {
	p.Offset = val
}
func (p *QueryNoteRequest) SetLimit(val int64) {
	p.Limit = val
}

func (p *QueryNoteRequest) IsSetSearchKey() bool {
	return p.SearchKey != nil
}

func (p *QueryNoteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryNoteRequest(%+v)", *p)
}

var fieldIDToName_QueryNoteRequest = map[int16]string{
	1: "user_id",
	2: "search_key",
	3: "offset",
	4: "limit",
}

type QueryNoteResponse struct {
	Notes    []*Note   `thrift:"notes,1" frugal:"1,default,list<Note>" json:"notes"`
	Total    int64     `thrift:"total,2" frugal:"2,default,i64" json:"total"`
	BaseResp *BaseResp `thrift:"base_resp,3" frugal:"3,default,BaseResp" json:"base_resp"`
}

func NewQueryNoteResponse() *QueryNoteResponse {
	return &QueryNoteResponse{}
}

func (p *QueryNoteResponse) InitDefault() {
}

func (p *QueryNoteResponse) GetNotes() (v []*Note) {
	return p.Notes
}

func (p *QueryNoteResponse) GetTotal() (v int64) {
	return p.Total
}

var QueryNoteResponse_BaseResp_DEFAULT *BaseResp

func (p *QueryNoteResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return QueryNoteResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *QueryNoteResponse) SetNotes(val []*Note) {
	p.Notes = val
}
func (p *QueryNoteResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *QueryNoteResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}

func (p *QueryNoteResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QueryNoteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryNoteResponse(%+v)", *p)
}

var fieldIDToName_QueryNoteResponse = map[int16]string{
	1: "notes",
	2: "total",
	3: "base_resp",
}

type MGetNoteRequest struct {
	NoteIds []int64 `thrift:"note_ids,1" frugal:"1,default,list<i64>" json:"note_ids"`
}

func NewMGetNoteRequest() *MGetNoteRequest {
	return &MGetNoteRequest{}
}

func (p *MGetNoteRequest) InitDefault() {
}

func (p *MGetNoteRequest) GetNoteIds() (v []int64) {
	return p.NoteIds
}
func (p *MGetNoteRequest) SetNoteIds(val []int64) {
	p.NoteIds = val
}

func (p *MGetNoteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetNoteRequest(%+v)", *p)
}

var fieldIDToName_MGetNoteRequest = map[int16]string{
	1: "note_ids",
}

type MGetNoteResponse struct {
	Notes    []*Note   `thrift:"notes,1" frugal:"1,default,list<Note>" json:"notes"`
	BaseResp *BaseResp `thrift:"base_resp,2" frugal:"2,default,BaseResp" json:"base_resp"`
}

func NewMGetNoteResponse() *MGetNoteResponse {
	return &MGetNoteResponse{}
}

func (p *MGetNoteResponse) InitDefault() {
}

func (p *MGetNoteResponse) GetNotes() (v []*Note) {
	return p.Notes
}

var MGetNoteResponse_BaseResp_DEFAULT *BaseResp

func (p *MGetNoteResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return MGetNoteResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MGetNoteResponse) SetNotes(val []*Note) {
	p.Notes = val
}
func (p *MGetNoteResponse) SetBaseResp(val *BaseResp) {
	p.BaseResp = val
}

func (p *MGetNoteResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MGetNoteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MGetNoteResponse(%+v)", *p)
}

var fieldIDToName_MGetNoteResponse = map[int16]string{
	1: "notes",
	2: "base_resp",
}

type NoteService interface {
	CreateNote(ctx context.Context, req *CreateNoteRequest) (r *CreateNoteResponse, err error)

	DeleteNote(ctx context.Context, req *DeleteNoteRequest) (r *DeleteNoteResponse, err error)

	UpdateNote(ctx context.Context, req *UpdateNoteRequest) (r *UpdateNoteResponse, err error)

	QueryNote(ctx context.Context, req *QueryNoteRequest) (r *QueryNoteResponse, err error)

	MGetNote(ctx context.Context, req *MGetNoteRequest) (r *MGetNoteResponse, err error)
}

type NoteServiceCreateNoteArgs struct {
	Req *CreateNoteRequest `thrift:"req,1" frugal:"1,default,CreateNoteRequest" json:"req"`
}

func NewNoteServiceCreateNoteArgs() *NoteServiceCreateNoteArgs {
	return &NoteServiceCreateNoteArgs{}
}

func (p *NoteServiceCreateNoteArgs) InitDefault() {
}

var NoteServiceCreateNoteArgs_Req_DEFAULT *CreateNoteRequest

func (p *NoteServiceCreateNoteArgs) GetReq() (v *CreateNoteRequest) {
	if !p.IsSetReq() {
		return NoteServiceCreateNoteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NoteServiceCreateNoteArgs) SetReq(val *CreateNoteRequest) {
	p.Req = val
}

func (p *NoteServiceCreateNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NoteServiceCreateNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceCreateNoteArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceCreateNoteArgs = map[int16]string{
	1: "req",
}

type NoteServiceCreateNoteResult struct {
	Success *CreateNoteResponse `thrift:"success,0,optional" frugal:"0,optional,CreateNoteResponse" json:"success,omitempty"`
}

func NewNoteServiceCreateNoteResult() *NoteServiceCreateNoteResult {
	return &NoteServiceCreateNoteResult{}
}

func (p *NoteServiceCreateNoteResult) InitDefault() {
}

var NoteServiceCreateNoteResult_Success_DEFAULT *CreateNoteResponse

func (p *NoteServiceCreateNoteResult) GetSuccess() (v *CreateNoteResponse) {
	if !p.IsSetSuccess() {
		return NoteServiceCreateNoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NoteServiceCreateNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateNoteResponse)
}

func (p *NoteServiceCreateNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceCreateNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceCreateNoteResult(%+v)", *p)
}

var fieldIDToName_NoteServiceCreateNoteResult = map[int16]string{
	0: "success",
}

type NoteServiceDeleteNoteArgs struct {
	Req *DeleteNoteRequest `thrift:"req,1" frugal:"1,default,DeleteNoteRequest" json:"req"`
}

func NewNoteServiceDeleteNoteArgs() *NoteServiceDeleteNoteArgs {
	return &NoteServiceDeleteNoteArgs{}
}

func (p *NoteServiceDeleteNoteArgs) InitDefault() {
}

var NoteServiceDeleteNoteArgs_Req_DEFAULT *DeleteNoteRequest

func (p *NoteServiceDeleteNoteArgs) GetReq() (v *DeleteNoteRequest) {
	if !p.IsSetReq() {
		return NoteServiceDeleteNoteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NoteServiceDeleteNoteArgs) SetReq(val *DeleteNoteRequest) {
	p.Req = val
}

func (p *NoteServiceDeleteNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NoteServiceDeleteNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceDeleteNoteArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceDeleteNoteArgs = map[int16]string{
	1: "req",
}

type NoteServiceDeleteNoteResult struct {
	Success *DeleteNoteResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteNoteResponse" json:"success,omitempty"`
}

func NewNoteServiceDeleteNoteResult() *NoteServiceDeleteNoteResult {
	return &NoteServiceDeleteNoteResult{}
}

func (p *NoteServiceDeleteNoteResult) InitDefault() {
}

var NoteServiceDeleteNoteResult_Success_DEFAULT *DeleteNoteResponse

func (p *NoteServiceDeleteNoteResult) GetSuccess() (v *DeleteNoteResponse) {
	if !p.IsSetSuccess() {
		return NoteServiceDeleteNoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NoteServiceDeleteNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteNoteResponse)
}

func (p *NoteServiceDeleteNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceDeleteNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceDeleteNoteResult(%+v)", *p)
}

var fieldIDToName_NoteServiceDeleteNoteResult = map[int16]string{
	0: "success",
}

type NoteServiceUpdateNoteArgs struct {
	Req *UpdateNoteRequest `thrift:"req,1" frugal:"1,default,UpdateNoteRequest" json:"req"`
}

func NewNoteServiceUpdateNoteArgs() *NoteServiceUpdateNoteArgs {
	return &NoteServiceUpdateNoteArgs{}
}

func (p *NoteServiceUpdateNoteArgs) InitDefault() {
}

var NoteServiceUpdateNoteArgs_Req_DEFAULT *UpdateNoteRequest

func (p *NoteServiceUpdateNoteArgs) GetReq() (v *UpdateNoteRequest) {
	if !p.IsSetReq() {
		return NoteServiceUpdateNoteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NoteServiceUpdateNoteArgs) SetReq(val *UpdateNoteRequest) {
	p.Req = val
}

func (p *NoteServiceUpdateNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NoteServiceUpdateNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceUpdateNoteArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceUpdateNoteArgs = map[int16]string{
	1: "req",
}

type NoteServiceUpdateNoteResult struct {
	Success *UpdateNoteResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateNoteResponse" json:"success,omitempty"`
}

func NewNoteServiceUpdateNoteResult() *NoteServiceUpdateNoteResult {
	return &NoteServiceUpdateNoteResult{}
}

func (p *NoteServiceUpdateNoteResult) InitDefault() {
}

var NoteServiceUpdateNoteResult_Success_DEFAULT *UpdateNoteResponse

func (p *NoteServiceUpdateNoteResult) GetSuccess() (v *UpdateNoteResponse) {
	if !p.IsSetSuccess() {
		return NoteServiceUpdateNoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NoteServiceUpdateNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateNoteResponse)
}

func (p *NoteServiceUpdateNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceUpdateNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceUpdateNoteResult(%+v)", *p)
}

var fieldIDToName_NoteServiceUpdateNoteResult = map[int16]string{
	0: "success",
}

type NoteServiceQueryNoteArgs struct {
	Req *QueryNoteRequest `thrift:"req,1" frugal:"1,default,QueryNoteRequest" json:"req"`
}

func NewNoteServiceQueryNoteArgs() *NoteServiceQueryNoteArgs {
	return &NoteServiceQueryNoteArgs{}
}

func (p *NoteServiceQueryNoteArgs) InitDefault() {
}

var NoteServiceQueryNoteArgs_Req_DEFAULT *QueryNoteRequest

func (p *NoteServiceQueryNoteArgs) GetReq() (v *QueryNoteRequest) {
	if !p.IsSetReq() {
		return NoteServiceQueryNoteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NoteServiceQueryNoteArgs) SetReq(val *QueryNoteRequest) {
	p.Req = val
}

func (p *NoteServiceQueryNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NoteServiceQueryNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceQueryNoteArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceQueryNoteArgs = map[int16]string{
	1: "req",
}

type NoteServiceQueryNoteResult struct {
	Success *QueryNoteResponse `thrift:"success,0,optional" frugal:"0,optional,QueryNoteResponse" json:"success,omitempty"`
}

func NewNoteServiceQueryNoteResult() *NoteServiceQueryNoteResult {
	return &NoteServiceQueryNoteResult{}
}

func (p *NoteServiceQueryNoteResult) InitDefault() {
}

var NoteServiceQueryNoteResult_Success_DEFAULT *QueryNoteResponse

func (p *NoteServiceQueryNoteResult) GetSuccess() (v *QueryNoteResponse) {
	if !p.IsSetSuccess() {
		return NoteServiceQueryNoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NoteServiceQueryNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryNoteResponse)
}

func (p *NoteServiceQueryNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceQueryNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceQueryNoteResult(%+v)", *p)
}

var fieldIDToName_NoteServiceQueryNoteResult = map[int16]string{
	0: "success",
}

type NoteServiceMGetNoteArgs struct {
	Req *MGetNoteRequest `thrift:"req,1" frugal:"1,default,MGetNoteRequest" json:"req"`
}

func NewNoteServiceMGetNoteArgs() *NoteServiceMGetNoteArgs {
	return &NoteServiceMGetNoteArgs{}
}

func (p *NoteServiceMGetNoteArgs) InitDefault() {
}

var NoteServiceMGetNoteArgs_Req_DEFAULT *MGetNoteRequest

func (p *NoteServiceMGetNoteArgs) GetReq() (v *MGetNoteRequest) {
	if !p.IsSetReq() {
		return NoteServiceMGetNoteArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NoteServiceMGetNoteArgs) SetReq(val *MGetNoteRequest) {
	p.Req = val
}

func (p *NoteServiceMGetNoteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NoteServiceMGetNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceMGetNoteArgs(%+v)", *p)
}

var fieldIDToName_NoteServiceMGetNoteArgs = map[int16]string{
	1: "req",
}

type NoteServiceMGetNoteResult struct {
	Success *MGetNoteResponse `thrift:"success,0,optional" frugal:"0,optional,MGetNoteResponse" json:"success,omitempty"`
}

func NewNoteServiceMGetNoteResult() *NoteServiceMGetNoteResult {
	return &NoteServiceMGetNoteResult{}
}

func (p *NoteServiceMGetNoteResult) InitDefault() {
}

var NoteServiceMGetNoteResult_Success_DEFAULT *MGetNoteResponse

func (p *NoteServiceMGetNoteResult) GetSuccess() (v *MGetNoteResponse) {
	if !p.IsSetSuccess() {
		return NoteServiceMGetNoteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NoteServiceMGetNoteResult) SetSuccess(x interface{}) {
	p.Success = x.(*MGetNoteResponse)
}

func (p *NoteServiceMGetNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteServiceMGetNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteServiceMGetNoteResult(%+v)", *p)
}

var fieldIDToName_NoteServiceMGetNoteResult = map[int16]string{
	0: "success",
}
